---
import Layout from '../../layouts/Layout.astro';
import ChatConversation from '../../components/ChatConversation.astro';
import '../../styles/global.css';

const scriptGenerationConversation = [
  {
    id: '1',
    sender: 'user' as const,
    message: 'Every week I have to collect status updates from 12 different teams and compile them into a executive summary report. The process is incredibly manual and time-consuming. Can you help me build a script to automate this entire workflow?',
    timestamp: '4:20 PM',
    documents: [
      {
        name: 'Team_Status_Templates.zip',
        type: 'pdf' as const,
        size: '4.7 MB'
      },
      {
        name: 'Executive_Summary_Template.docx',
        type: 'docx' as const,
        size: '785 KB'
      },
      {
        name: 'Team_Email_List.xlsx',
        type: 'xlsx' as const,
        size: '245 KB'
      }
    ]
  },
  {
    id: '2',
    sender: 'ai' as const,
    message: 'I\'ll help you build a comprehensive automation script for your weekly status reporting workflow. Let me create a Python solution that handles email collection, content parsing, and executive summary generation.\\n\\n<strong>ü§ñ AUTOMATED REPORTING SYSTEM</strong>\\n\\n```python\\n#!/usr/bin/env python3\\n"""\\nWeekly Status Report Automation System\\nAuthor: AI Assistant\\nDescription: Automates collection and compilation of team status updates\\n"""\\n\\nimport smtplib\\nimport imaplib\\nimport email\\nimport pandas as pd\\nimport re\\nfrom datetime import datetime, timedelta\\nfrom email.mime.text import MIMEText\\nfrom email.mime.multipart import MIMEMultipart\\nfrom docx import Document\\nimport openai\\nimport logging\\n\\n# Setup logging\\nlogging.basicConfig(level=logging.INFO, format=\'%(asctime)s - %(levelname)s - %(message)s\')\\n\\nclass StatusReportAutomator:\\n    def __init__(self, config_file=\\'config.json\\'):\\n        self.config = self.load_config(config_file)\\n        self.teams = self.load_team_data()\\n        self.status_updates = {}\\n        \\n    def load_config(self, config_file):\\n        """Load email and API configuration"""\\n        # Configuration for email server, OpenAI API, etc.\\n        return {\\n            \\'email_server\\': \\'imap.gmail.com\\',\\n            \\'smtp_server\\': \\'smtp.gmail.com\\',\\n            \\'email_user\\': \\'your-email@company.com\\',\\n            \\'email_password\\': \\'your-app-password\\',\\n            \\'openai_api_key\\': \\'your-openai-key\\'\\n        }\\n    \\n    def load_team_data(self):\\n        """Load team information from Excel file"""\\n        df = pd.read_excel(\\'Team_Email_List.xlsx\\')\\n        return df.to_dict(\\'records\\')\\n```\\n\\n**üìß EMAIL AUTOMATION WORKFLOW:**\\n\\n**Phase 1: Automated Collection**\\n‚Ä¢ **Monday 9 AM:** Auto-send status request emails to all 12 teams\\n‚Ä¢ **Tuesday-Thursday:** Monitor inbox for responses\\n‚Ä¢ **Friday Morning:** Parse collected updates and flag missing responses\\n\\n**Phase 2: Content Processing**\\n‚Ä¢ **Extract key metrics:** Progress percentages, blockers, accomplishments\\n‚Ä¢ **Categorize updates:** By department, priority level, and status\\n‚Ä¢ **Identify patterns:** Recurring issues, resource needs, dependencies',
    timestamp: '4:22 PM'
  },
  {
    id: '3',
    sender: 'user' as const,
    message: 'This looks great! Can you show me the actual email collection and parsing logic? I want to make sure it can handle different email formats from different teams.',
    timestamp: '4:23 PM'
  },
  {
    id: '4',
    sender: 'ai' as const,
    message: '<strong>üì¨ INTELLIGENT EMAIL PROCESSING ENGINE</strong>\\n\\n```python\\ndef send_status_requests(self):\\n    """Send automated status request emails to all teams"""\\n    smtp_server = smtplib.SMTP(self.config[\\'smtp_server\\'], 587)\\n    smtp_server.starttls()\\n    smtp_server.login(self.config[\\'email_user\\'], self.config[\\'email_password\\'])\\n    \\n    for team in self.teams:\\n        subject = f"Weekly Status Update Request - Week of {datetime.now().strftime(\\\'%m/%d/%Y\\\')}"\\n        \\n        body = f"""\\nHi {team[\\'team_lead\\']},\\n\\nPlease provide your weekly status update by Thursday 5 PM. Include:\\n\\nüìä KEY METRICS:\\n‚Ä¢ Progress on current sprint/milestones (%)\\n‚Ä¢ Completed deliverables this week\\n‚Ä¢ Planned deliverables for next week\\n\\n‚ö†Ô∏è BLOCKERS & RISKS:\\n‚Ä¢ Current blockers requiring escalation\\n‚Ä¢ Upcoming risks or resource needs\\n\\nüéØ HIGHLIGHTS:\\n‚Ä¢ Major accomplishments or breakthroughs\\n‚Ä¢ Team recognition or customer feedback\\n\\nThis email is automated. Reply with your update and it will be processed automatically.\\n\\nThanks!\\n        """\\n        \\n        msg = MIMEMultipart()\\n        msg[\\'From\\'] = self.config[\\'email_user\\']\\n        msg[\\'To\\'] = team[\\'email\\']\\n        msg[\\'Subject\\'] = subject\\n        msg.attach(MIMEText(body, \\'plain\\'))\\n        \\n        smtp_server.sendmail(self.config[\\'email_user\\'], team[\\'email\\'], msg.as_string())\\n        logging.info(f"Status request sent to {team[\\'team_name\\']}")\\n    \\n    smtp_server.quit()\\n\\ndef collect_status_updates(self):\\n    """Collect and parse status update emails"""\\n    mail = imaplib.IMAP4_SSL(self.config[\\'email_server\\'])\\n    mail.login(self.config[\\'email_user\\'], self.config[\\'email_password\\'])\\n    mail.select(\\'inbox\\')\\n    \\n    # Search for status update emails from the last week\\n    search_criteria = \\'(SUBJECT "Weekly Status Update" SINCE "{}").format(\\n        (datetime.now() - timedelta(days=7)).strftime("%d-%%b-%Y")\\n    )\\n    \\n    result, messages = mail.search(None, search_criteria)\\n    \\n    for msg_num in messages[0].split():\\n        result, msg_data = mail.fetch(msg_num, \\'(RFC822)\\')\\n        email_msg = email.message_from_bytes(msg_data[0][1])\\n        \\n        sender = email_msg[\\'From\\']\\n        subject = email_msg[\\'Subject\\']\\n        body = self.extract_email_body(email_msg)\\n        \\n        # Parse the update using AI\\n        parsed_update = self.parse_status_update(body, sender)\\n        \\n        # Store parsed update\\n        team_name = self.get_team_name_from_email(sender)\\n        self.status_updates[team_name] = parsed_update\\n        \\n        logging.info(f"Processed update from {team_name}")\\n    \\n    mail.close()\\n    mail.logout()\\n\\ndef parse_status_update(self, email_body, sender):\\n    """Use AI to extract structured information from free-form status updates"""\\n    \\n    prompt = f"""\\n    Extract structured information from this team status update:\\n    \\n    Email: {email_body}\\n    \\n    Please extract and format as JSON:\\n    {{\\n      "progress_percentage": <number or null>,\\n      "completed_deliverables": [<list of completed items>],\\n      "planned_deliverables": [<list of planned items>],\\n      "blockers": [<list of blockers>],\\n      "risks": [<list of risks>],\\n      "highlights": [<list of achievements>],\\n      "team_morale": <"high"|"medium"|"low" or null>,\\n      "resource_requests": [<list of needs>],\\n      "dependencies": [<list of dependencies on other teams>]\\n    }}\\n    \\n    Handle variations in format gracefully. Extract intent even from informal updates.\\n    """\\n    \\n    # Call OpenAI API (or similar) to parse the content\\n    response = openai.ChatCompletion.create(\\n        model="gpt-4",\\n        messages=[{"role": "user", "content": prompt}]\\n    )\\n    \\n    return json.loads(response.choices[0].message.content)\\n```\\n\\n**üéØ INTELLIGENT PARSING FEATURES:**\\n\\n**Format Flexibility:**\\n‚Ä¢ **Structured emails:** Parses teams that follow templates perfectly\\n‚Ä¢ **Bullet points:** Handles informal bullet-point updates\\n‚Ä¢ **Paragraph format:** Extracts info from narrative-style updates\\n‚Ä¢ **Mixed formats:** Adapts to each team\\'s communication style\\n\\n**Smart Extraction:**\\n‚Ä¢ **Progress indicators:** "75% complete", "nearly done", "behind schedule"\\n‚Ä¢ **Sentiment analysis:** Detects team morale from tone\\n‚Ä¢ **Urgency detection:** Flags critical blockers requiring immediate attention\\n‚Ä¢ **Cross-references:** Identifies dependencies between teams',
    timestamp: '4:25 PM'
  },
  {
    id: '5',
    sender: 'user' as const,
    message: 'Excellent! Now can you show me how it generates the executive summary? I need it to be polished and highlight the most important information for leadership.',
    timestamp: '4:26 PM'
  },
  {
    id: '6',
    sender: 'ai' as const,
    message: '<strong>üìã EXECUTIVE SUMMARY GENERATION ENGINE</strong>\\n\\n```python\\ndef generate_executive_summary(self):\\n    """Generate polished executive summary from collected updates"""\\n    \\n    # Analyze all updates for key themes\\n    summary_data = self.analyze_portfolio_health()\\n    \\n    # Generate executive summary using AI\\n    prompt = f"""\\n    Create a professional executive summary for leadership based on weekly team updates.\\n    \\n    Data: {summary_data}\\n    \\n    Format as a polished business document with these sections:\\n    \\n    üìä PORTFOLIO HEALTH SNAPSHOT\\n    ‚Ä¢ Overall progress indicator\\n    ‚Ä¢ Key metrics and trends\\n    ‚Ä¢ Resource utilization summary\\n    \\n    üö® CRITICAL ATTENTION REQUIRED\\n    ‚Ä¢ High-priority blockers needing executive intervention\\n    ‚Ä¢ Resource conflicts or constraints\\n    ‚Ä¢ Timeline risks to key deliverables\\n    \\n    üéØ MAJOR ACCOMPLISHMENTS\\n    ‚Ä¢ Significant milestones achieved this week\\n    ‚Ä¢ Customer wins or breakthrough innovations\\n    ‚Ä¢ Team recognition highlights\\n    \\n    üìà WEEK AHEAD PRIORITIES\\n    ‚Ä¢ Critical deliverables due next week\\n    ‚Ä¢ Cross-team dependencies requiring coordination\\n    ‚Ä¢ Executive support needed\\n    \\n    Use professional business language. Be concise but comprehensive.\\n    Highlight items requiring executive attention vs. informational items.\\n    """\\n    \\n    response = openai.ChatCompletion.create(\\n        model="gpt-4",\\n        messages=[{"role": "user", "content": prompt}]\\n    )\\n    \\n    return response.choices[0].message.content\\n\\ndef analyze_portfolio_health(self):\\n    """Analyze all team updates for portfolio-level insights"""\\n    \\n    analysis = {\\n        \\'total_teams\\': len(self.status_updates),\\n        \\'on_track_teams\\': 0,\\n        \\'at_risk_teams\\': 0,\\n        \\'critical_blockers\\': [],\\n        \\'major_accomplishments\\': [],\\n        \\'resource_requests\\': [],\\n        \\'cross_team_dependencies\\': [],\\n        \\'overall_progress\\': 0\\n    }\\n    \\n    for team, update in self.status_updates.items():\\n        # Assess team health\\n        if update.get(\\'progress_percentage\\', 0) >= 80:\\n            analysis[\\'on_track_teams\\'] += 1\\n        elif len(update.get(\\'blockers\\', [])) > 2:\\n            analysis[\\'at_risk_teams\\'] += 1\\n        \\n        # Aggregate critical items\\n        for blocker in update.get(\\'blockers\\', []):\\n            if \\'executive\\' in blocker.lower() or \\'urgent\\' in blocker.lower():\\n                analysis[\\'critical_blockers\\'].append(f"{team}: {blocker}")\\n        \\n        # Collect highlights\\n        analysis[\\'major_accomplishments\\'].extend([\\n            f"{team}: {highlight}" for highlight in update.get(\\'highlights\\', [])\\n        ])\\n        \\n        # Track resource needs\\n        analysis[\\'resource_requests\\'].extend([\\n            f"{team}: {request}" for request in update.get(\\'resource_requests\\', [])\\n        ])\\n    \\n    return analysis\\n\\ndef create_formatted_report(self, summary_text):\\n    """Create formatted Word document with executive summary"""\\n    \\n    doc = Document(\\'Executive_Summary_Template.docx\\')\\n    \\n    # Add header with date\\n    header = doc.sections[0].header\\n    header_para = header.paragraphs[0]\\n    header_para.text = f"Weekly Executive Summary - {datetime.now().strftime(\\'%B %d, %Y\\')}"\\n    \\n    # Add executive summary content\\n    doc.add_heading(\\'Executive Summary\\', 0)\\n    doc.add_paragraph(summary_text)\\n    \\n    # Add detailed team breakdown\\n    doc.add_heading(\\'Detailed Team Status\\', 1)\\n    \\n    for team, update in self.status_updates.items():\\n        doc.add_heading(team, 2)\\n        \\n        # Progress\\n        progress = update.get(\\'progress_percentage\\', \\'Not specified\\')\\n        doc.add_paragraph(f"Progress: {progress}%", style=\\'List Bullet\\')\\n        \\n        # Blockers\\n        if update.get(\\'blockers\\'):\\n            doc.add_paragraph("Blockers:", style=\\'List Bullet\\')\\n            for blocker in update[\\'blockers\\']:\\n                doc.add_paragraph(f"  ‚Ä¢ {blocker}", style=\\'List Bullet 2\\')\\n        \\n        # Accomplishments\\n        if update.get(\\'highlights\\'):\\n            doc.add_paragraph("Key Accomplishments:", style=\\'List Bullet\\')\\n            for highlight in update[\\'highlights\\']:\\n                doc.add_paragraph(f"  ‚Ä¢ {highlight}", style=\\'List Bullet 2\\')\\n    \\n    # Save report\\n    filename = f"Executive_Summary_{datetime.now().strftime(\\'%Y%m%d\\')}.docx"\\n    doc.save(filename)\\n    \\n    return filename\\n```\\n\\n**üìä SAMPLE GENERATED EXECUTIVE SUMMARY:**\\n\\n**Portfolio Health Snapshot:**\\n‚Ä¢ **Overall Status:** 8 of 12 teams on track (67% green status)\\n‚Ä¢ **Average Progress:** 78% completion of quarterly milestones\\n‚Ä¢ **Resource Utilization:** 94% capacity with 2 teams requesting additional support\\n\\n**Critical Attention Required:**\\n‚Ä¢ **Engineering Team:** Database migration blocker requires vendor escalation by COO\\n‚Ä¢ **Marketing Team:** Campaign budget approval needed for Q4 launch\\n‚Ä¢ **Sales Team:** Contract negotiation stalled, needs legal review\\n\\n**Major Accomplishments:**\\n‚Ä¢ **Product Team:** Beta testing completed, 94% customer satisfaction\\n‚Ä¢ **Customer Success:** Achieved 98% retention rate, highest ever\\n‚Ä¢ **Operations:** Infrastructure upgrade completed 2 weeks early\\n\\n**üìÖ AUTOMATED SCHEDULING:**\\n‚Ä¢ **Monday 9 AM:** Send status requests\\n‚Ä¢ **Friday 2 PM:** Generate executive summary\\n‚Ä¢ **Friday 3 PM:** Email report to leadership team\\n‚Ä¢ **Monthly:** Archive reports and analyze trends',
    timestamp: '4:28 PM',
    documents: [
      {
        name: 'status_report_automator.py',
        type: 'txt' as const,
        size: '12.3 KB'
      },
      {
        name: 'Executive_Summary_20241115.docx',
        type: 'docx' as const,
        size: '2.1 MB'
      },
      {
        name: 'Automation_Setup_Guide.pdf',
        type: 'pdf' as const,
        size: '1.8 MB'
      }
    ]
  }
];
---

<Layout title="Script Generation | Computation + Automation" description="See how AI creates custom automation scripts for repetitive business workflows">
  <!-- Breadcrumb -->
  <div class="bg-slate-50 border-b border-slate-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-4">
          <li>
            <div>
              <a href="/" class="text-slate-400 hover:text-slate-500 transition-colors">
                <svg class="flex-shrink-0 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                </svg>
              </a>
            </div>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="flex-shrink-0 h-5 w-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
              </svg>
              <a href="/computation" class="ml-4 text-sm font-medium text-slate-500 hover:text-slate-700 transition-colors">
                Computation + Automation
              </a>
            </div>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="flex-shrink-0 h-5 w-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
              </svg>
              <span class="ml-4 text-sm font-medium text-slate-900">
                Script Generation
              </span>
            </div>
          </li>
        </ol>
      </nav>
    </div>
  </div>

  <!-- Hero Section -->
  <section class="bg-gradient-to-br from-yellow-50 via-slate-50 to-yellow-100 py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-8">
        <div class="w-16 h-16 bg-yellow-100 text-yellow-600 rounded-2xl flex items-center justify-center mx-auto mb-6">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
          </svg>
        </div>
        <h1 class="text-4xl md:text-5xl font-bold text-slate-900 mb-6">
          Script Generation
        </h1>
        <p class="text-xl text-slate-600 max-w-3xl mx-auto leading-relaxed">
          Build custom automation scripts for repetitive business workflows. 
          AI writes production-ready code that handles email processing, data transformation, and report generation.
        </p>
      </div>
    </div>
  </section>

  <!-- Pattern Overview -->
  <section class="py-12 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid lg:grid-cols-3 gap-8 mb-16">
        <div class="lg:col-span-2">
          <h2 class="text-2xl font-bold text-slate-900 mb-6">Custom Workflow Automation</h2>
          <div class="space-y-4 text-slate-700">
            <p class="leading-relaxed">
              This pattern transforms AI into a <strong>workflow engineer</strong>. Rather than using generic 
              automation tools, AI writes custom scripts tailored to your specific processes, data formats, 
              and business rules. The result is precision automation that adapts to your exact needs.
            </p>
            <p class="leading-relaxed">
              AI understands both the technical implementation and business context. It handles edge cases, 
              error conditions, and integration challenges that would trip up template-based solutions. 
              The scripts it generates are production-ready, maintainable, and designed for long-term reliability.
            </p>
          </div>
          
          <div class="mt-8 bg-yellow-50 rounded-xl p-6 border border-yellow-100">
            <h3 class="font-semibold text-yellow-900 mb-4">Automation Capabilities</h3>
            <div class="grid md:grid-cols-2 gap-4">
              <div>
                <h4 class="font-medium text-yellow-900 mb-2">Data Processing</h4>
                <ul class="text-sm text-yellow-700 space-y-1">
                  <li>‚Ä¢ Email parsing and extraction</li>
                  <li>‚Ä¢ Document format conversion</li>
                  <li>‚Ä¢ API integration and data sync</li>
                  <li>‚Ä¢ Report generation and formatting</li>
                </ul>
              </div>
              <div>
                <h4 class="font-medium text-yellow-900 mb-2">Workflow Management</h4>
                <ul class="text-sm text-yellow-700 space-y-1">
                  <li>‚Ä¢ Scheduled task execution</li>
                  <li>‚Ä¢ Error handling and notifications</li>
                  <li>‚Ä¢ Quality assurance checks</li>
                  <li>‚Ä¢ Audit logging and monitoring</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        
        <div class="bg-slate-50 rounded-xl p-6 border border-slate-200">
          <h3 class="font-semibold text-slate-900 mb-4">Perfect For</h3>
          <ul class="space-y-3 text-sm text-slate-600">
            <li class="flex items-start">
              <div class="w-2 h-2 bg-yellow-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>Weekly/monthly reporting workflows</span>
            </li>
            <li class="flex items-start">
              <div class="w-2 h-2 bg-yellow-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>Data collection and aggregation</span>
            </li>
            <li class="flex items-start">
              <div class="w-2 h-2 bg-yellow-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>Email processing and routing</span>
            </li>
            <li class="flex items-start">
              <div class="w-2 h-2 bg-yellow-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>Document format conversions</span>
            </li>
            <li class="flex items-start">
              <div class="w-2 h-2 bg-yellow-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>System integration tasks</span>
            </li>
            <li class="flex items-start">
              <div class="w-2 h-2 bg-yellow-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>Quality assurance automation</span>
            </li>
          </ul>
          
          <div class="mt-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
            <h4 class="font-medium text-yellow-900 mb-2">‚öôÔ∏è Key Advantage</h4>
            <p class="text-xs text-yellow-700">
              AI creates bespoke automation that handles your specific edge cases, 
              data formats, and business rules‚Äînot generic one-size-fits-all solutions.
            </p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Conversation Example -->
  <section class="py-16 bg-slate-50">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-slate-900 mb-4">Weekly Reporting Automation</h2>
        <p class="text-slate-600 leading-relaxed">
          Watch AI build a complete workflow automation system for executive reporting
        </p>
      </div>
      
      <ChatConversation 
        messages={scriptGenerationConversation}
        title="Custom Workflow Automation Development"
        description="Operations manager building automated system to collect and compile weekly team status reports"
      />
    </div>
  </section>

  <!-- Value Demonstration -->
  <section class="py-16 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <h2 class="text-3xl font-bold text-slate-900 mb-8 text-center">The Automation Builder</h2>
      
      <div class="grid lg:grid-cols-2 gap-12">
        <!-- Manual Process -->
        <div>
          <h3 class="text-xl font-semibold text-slate-900 mb-6 flex items-center">
            <div class="w-8 h-8 bg-red-100 text-red-600 rounded-full flex items-center justify-center mr-3 text-sm">üìß</div>
            Manual Reporting Process
          </h3>
          <div class="space-y-4">
            <div class="bg-red-50 rounded-xl p-6 border border-red-200">
              <ul class="space-y-3 text-sm text-red-700">
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-red-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>6 hours every Friday collecting updates manually</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-red-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Chasing down missing reports via email and Slack</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-red-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Copy-pasting content between 12 different formats</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-red-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Manual formatting and error-checking</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-red-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Weekend work to meet Monday morning deadline</span>
                </li>
              </ul>
            </div>
            <div class="text-center py-4">
              <div class="text-2xl font-bold text-red-600">Weekly Report</div>
              <div class="text-sm text-red-600">= 8 hours manual effort</div>
            </div>
          </div>
        </div>
        
        <!-- AI Script Generation -->
        <div>
          <h3 class="text-xl font-semibold text-slate-900 mb-6 flex items-center">
            <div class="w-8 h-8 bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center mr-3 text-sm">ü§ñ</div>
            AI-Generated Automation
          </h3>
          <div class="space-y-4">
            <div class="bg-yellow-50 rounded-xl p-6 border border-yellow-200">
              <ul class="space-y-3 text-sm text-yellow-700">
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-yellow-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Automated email collection and parsing</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-yellow-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>AI-powered content extraction from any format</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-yellow-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Intelligent summary generation and formatting</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-yellow-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Automatic quality checks and error detection</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-yellow-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Scheduled execution with notification alerts</span>
                </li>
              </ul>
            </div>
            <div class="text-center py-4">
              <div class="text-2xl font-bold text-yellow-600">Weekly Report</div>
              <div class="text-sm text-yellow-600">= 30 minutes oversight</div>
            </div>
          </div>
        </div>
      </div>

      <!-- ROI Metrics -->
      <div class="mt-16 grid md:grid-cols-4 gap-6 text-center">
        <div class="bg-slate-50 rounded-xl p-6 border border-slate-200">
          <div class="text-3xl font-bold text-yellow-600 mb-2">93%</div>
          <div class="text-sm text-slate-600 mb-1">Time Savings</div>
          <div class="text-xs text-slate-500">8 hours ‚Üí 30 minutes</div>
        </div>
        <div class="bg-slate-50 rounded-xl p-6 border border-slate-200">
          <div class="text-3xl font-bold text-yellow-600 mb-2">12</div>
          <div class="text-sm text-slate-600 mb-1">Team Updates</div>
          <div class="text-xs text-slate-500">processed automatically</div>
        </div>
        <div class="bg-slate-50 rounded-xl p-6 border border-slate-200">
          <div class="text-3xl font-bold text-yellow-600 mb-2">100%</div>
          <div class="text-sm text-slate-600 mb-1">Consistency</div>
          <div class="text-xs text-slate-500">no missed deadlines</div>
        </div>
        <div class="bg-slate-50 rounded-xl p-6 border border-slate-200">
          <div class="text-3xl font-bold text-yellow-600 mb-2">$2,100</div>
          <div class="text-sm text-slate-600 mb-1">Monthly Labor Savings</div>
          <div class="text-xs text-slate-500">32 hours reclaimed</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Key Insight -->
  <section class="py-16 bg-slate-900">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h2 class="text-3xl font-bold text-white mb-6">Beyond Generic Automation</h2>
      <p class="text-xl text-slate-300 leading-relaxed mb-8">
        <span class="text-yellow-400 font-semibold">AI writes code that understands your specific business context.</span>
        Instead of forcing your workflow into rigid automation templates, AI creates bespoke solutions 
        that handle your unique data formats, edge cases, and business rules. It's the difference between 
        automation that works for everyone and automation that works perfectly for you.
      </p>
      
      <div class="grid md:grid-cols-3 gap-6 mt-12">
        <div class="text-center">
          <div class="text-3xl font-bold text-yellow-400 mb-2">67%</div>
          <div class="text-slate-400">Teams On Track (Auto-calculated)</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-yellow-400 mb-2">78%</div>
          <div class="text-slate-400">Average Progress Across Portfolio</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-yellow-400 mb-2">94%</div>
          <div class="text-slate-400">Resource Utilization Detected</div>
        </div>
      </div>
    </div>
  </section>
</Layout>