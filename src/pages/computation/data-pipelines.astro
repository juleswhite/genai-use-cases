---
import Layout from '../../layouts/Layout.astro';
import ChatConversation from '../../components/ChatConversation.astro';
import '../../styles/global.css';

const dataPipelinesConversation = [
  {
    id: '1',
    sender: 'user' as const,
    message: 'We\'re evaluating cloud infrastructure vendors and getting proposals in completely different formats - some PDFs, some Excel, some custom presentations. I need to create a systematic way to extract key information and populate our vendor comparison matrix automatically.',
    timestamp: '11:30 AM',
    documents: [
      {
        name: 'AWS_Infrastructure_Proposal.pdf',
        type: 'pdf' as const,
        size: '3.4 MB'
      },
      {
        name: 'Azure_Cost_Breakdown.xlsx',
        type: 'xlsx' as const,
        size: '2.1 MB'
      },
      {
        name: 'GCP_Technical_Specs.pptx',
        type: 'pptx' as const,
        size: '5.8 MB'
      },
      {
        name: 'Vendor_Comparison_Template.xlsx',
        type: 'xlsx' as const,
        size: '892 KB'
      }
    ]
  },
  {
    id: '2',
    sender: 'ai' as const,
    message: `I'll build a comprehensive data pipeline that can ingest vendor proposals in any format and automatically populate your comparison matrix. Let me create a system that handles document parsing, data extraction, and structured output generation.

<strong>üîÑ VENDOR PROPOSAL DATA PIPELINE</strong>

\`\`\`python
#!/usr/bin/env python3
"""
Vendor Proposal Processing Pipeline
Author: AI Assistant
Description: Automated extraction and comparison of vendor proposals
"""

import pandas as pd
import numpy as np
from pathlib import Path
import json
import logging
from typing import Dict, List, Any
from dataclasses import dataclass
from datetime import datetime

# Document processing imports
import PyPDF2
from pptx import Presentation
from openpyxl import load_workbook
import openai
from PIL import Image
import pytesseract  # For OCR of images in presentations

@dataclass
class VendorProposal:
    vendor_name: str
    document_type: str
    pricing_model: str
    monthly_cost: float
    setup_fees: float
    compute_specs: Dict[str, Any]
    storage_options: Dict[str, Any]
    sla_guarantees: Dict[str, Any]
    support_tier: str
    contract_terms: Dict[str, Any]
    compliance_certifications: List[str]
    
class VendorProposalProcessor:
    def __init__(self, config_file="pipeline_config.json"):
        self.config = self.load_config(config_file)
        self.extraction_schema = self.define_extraction_schema()
        self.processed_proposals = {}
        
        # Setup logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

    def define_extraction_schema(self):
        """Define the standardized schema for vendor comparison"""
        return {
            "pricing": {
                "monthly_base_cost": "number",
                "per_gb_storage_cost": "number", 
                "data_transfer_cost": "number",
                "setup_fees": "number"
            },
            "technical_specs": {
                "cpu_cores": "number",
                "ram_gb": "number",
                "storage_type": "string",
                "network_bandwidth": "string"
            },
            "service_levels": {
                "uptime_sla": "percentage",
                "support_response_time": "string",
                "backup_frequency": "string"
            },
            "compliance": {
                "certifications": "list",
                "data_residency": "string",
                "encryption_standards": "list"
            }
        }
\`\`\`

**üìÑ MULTI-FORMAT DOCUMENT PROCESSING:**

**Phase 1: Document Ingestion**
‚Ä¢ **PDF Processing:** Extract text, tables, and embedded images
‚Ä¢ **Excel Analysis:** Parse multiple sheets, formulas, and charts
‚Ä¢ **PowerPoint Parsing:** Extract slide content, speaker notes, and images
‚Ä¢ **OCR Integration:** Handle scanned documents and image-based content`,
    timestamp: '11:32 AM'
  },
  {
    id: '3',
    sender: 'user' as const,
    message: 'This looks promising! Can you show me how it actually extracts and normalizes the data from these different formats? The challenge is that each vendor structures their information completely differently.',
    timestamp: '11:33 AM'
  },
  {
    id: '4',
    sender: 'ai' as const,
    message: `<strong>üîç INTELLIGENT EXTRACTION ENGINE</strong>

\`\`\`python
def process_pdf_proposal(self, pdf_path: str) -> Dict[str, Any]:
    """Extract structured data from PDF proposals"""
    
    # Extract text from PDF
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        text_content = ""
        for page in pdf_reader.pages:
            text_content += page.extract_text()
    
    # Use AI to extract structured information
    extraction_prompt = f"""
    Extract vendor proposal information from this PDF content:
    
    {text_content[:8000]}  # Truncate for token limits
    
    Please extract and structure as JSON matching this schema:
    {{
      "vendor_name": "string",
      "pricing": {{
        "monthly_base_cost": "number (USD)",
        "per_gb_storage_cost": "number (USD)",
        "data_transfer_cost": "number (USD per GB)",
        "setup_fees": "number (USD)"
      }},
      "technical_specs": {{
        "cpu_cores": "number",
        "ram_gb": "number", 
        "storage_type": "SSD/HDD/NVMe",
        "network_bandwidth": "string"
      }},
      "service_levels": {{
        "uptime_sla": "percentage as decimal",
        "support_response_time": "string",
        "backup_frequency": "string"
      }},
      "compliance": {{
        "certifications": ["list of certifications"],
        "data_residency": "string",
        "encryption_standards": ["list of encryption methods"]
      }}
    }}
    
    Handle variations in terminology (e.g., 'compute units' vs 'CPU cores').
    Convert all pricing to monthly USD equivalents.
    If information is missing, use null values.
    """
    
    response = openai.ChatCompletion.create(
        model="gpt-4-1106-preview",
        messages=[{"role": "user", "content": extraction_prompt}]
    )
    
    return json.loads(response.choices[0].message.content)

def process_excel_proposal(self, excel_path: str) -> Dict[str, Any]:
    """Extract structured data from Excel proposals"""
    
    workbook = load_workbook(excel_path)
    extracted_data = {}
    
    # Process each worksheet
    for sheet_name in workbook.sheetnames:
        sheet = workbook[sheet_name]
        
        # Convert sheet to pandas DataFrame
        data = []
        for row in sheet.iter_rows(values_only=True):
            data.append(row)
        
        df = pd.DataFrame(data)
        
        # Use AI to understand and extract from tabular data
        sheet_summary = self.analyze_excel_sheet(df, sheet_name)
        extracted_data[sheet_name] = sheet_summary
    
    # Combine and normalize across sheets
    return self.normalize_excel_data(extracted_data)

def normalize_extracted_data(self, raw_data: Dict[str, Any], vendor_name: str):
    """Normalize extracted data into standardized format"""
    
    normalization_prompt = f"""
    Normalize this vendor proposal data into a standardized format:
    
    Raw Data: {json.dumps(raw_data, indent=2)}
    Vendor: {vendor_name}
    
    Please normalize and return in this exact structure:
    {{
      "monthly_cost_usd": <number>,
      "setup_fees_usd": <number>,
      "compute_vcpus": <number>,
      "memory_gb": <number>,
      "storage_type": "SSD|HDD|NVMe",
      "uptime_sla_percent": <decimal 0-1>,
      "support_tier": "Basic|Standard|Premium|Enterprise",
      "certifications": [<list of compliance certs>],
      "contract_length_months": <number>,
      "data_centers_regions": [<list of regions>],
      "backup_included": <boolean>,
      "monitoring_included": <boolean>
    }}
    
    Conversion rules:
    - Convert all currencies to USD
    - Normalize CPU specs (cores, vCPUs, etc.) to vCPU count
    - Convert storage sizes to GB
    - Standardize region names (us-east-1, eu-west-1, etc.)
    - Map support tiers to standard categories
    - Convert SLA percentages to decimals (99.9% = 0.999)
    """
    
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": normalization_prompt}]
    )
    
    return json.loads(response.choices[0].message.content)
\`\`\`

**üìä KEY NORMALIZATION CHALLENGES SOLVED:**

**Pricing Variations:**
‚Ä¢ **AWS:** "$0.096/hour" ‚Üí Converts to $69.12/month
‚Ä¢ **Azure:** "$2,100/month" ‚Üí Direct monthly cost
‚Ä¢ **GCP:** "$0.00014/second" ‚Üí Converts to $365.04/month

**Technical Specifications:**
‚Ä¢ **CPU:** "4 cores", "4 vCPUs", "4 compute units" ‚Üí Normalized to 4 vCPUs
‚Ä¢ **Storage:** "500GB SSD", "0.5TB solid state" ‚Üí Normalized to 500GB SSD
‚Ä¢ **Memory:** "8192MB", "8GB RAM" ‚Üí Normalized to 8GB

**Service Levels:**
‚Ä¢ **Uptime:** "99.95%", "four nines" ‚Üí Normalized to 0.9995
‚Ä¢ **Support:** "24x7", "Premium", "Enterprise" ‚Üí Mapped to standard tiers`,
    timestamp: '11:35 AM'
  },
  {
    id: '5',
    sender: 'user' as const,
    message: 'Excellent! Now can you show me how this all comes together into the final comparison matrix? I need something that our procurement team can use for decision-making.',
    timestamp: '11:36 AM'
  },
  {
    id: '6',
    sender: 'ai' as const,
    message: `<strong>üìà AUTOMATED COMPARISON MATRIX GENERATION</strong>

\`\`\`python
def generate_comparison_matrix(self) -> pd.DataFrame:
    """Generate comprehensive vendor comparison matrix"""
    
    # Create comparison DataFrame
    comparison_data = []
    
    for vendor, proposal in self.processed_proposals.items():
        row = {
            "Vendor": proposal.vendor_name,
            "Monthly Cost (USD)": proposal.monthly_cost,
            "Setup Fees (USD)": proposal.setup_fees,
            "vCPUs": proposal.compute_specs.get("vcpus", "N/A"),
            "Memory (GB)": proposal.compute_specs.get("memory_gb", "N/A"),
            "Storage Type": proposal.compute_specs.get("storage_type", "N/A"),
            "Uptime SLA (%)": f"{proposal.sla_guarantees.get('uptime', 0) * 100:.2f}%",
            "Support Tier": proposal.support_tier,
            "SOC 2 Certified": "SOC 2" in proposal.compliance_certifications,
            "HIPAA Compliant": "HIPAA" in proposal.compliance_certifications,
            "Contract Length": f"{proposal.contract_terms.get('length_months', 'TBD')} months"
        }
        comparison_data.append(row)
    
    df = pd.DataFrame(comparison_data)
    
    # Add calculated columns
    df["Cost per vCPU"] = df["Monthly Cost (USD)"] / df["vCPUs"].replace("N/A", np.nan)
    df["Total First Year Cost"] = df["Monthly Cost (USD)"] * 12 + df["Setup Fees (USD)"]
    
    return df

def create_executive_summary(self, comparison_df: pd.DataFrame) -> str:
    """Generate executive summary with recommendations"""
    
    analysis_prompt = f"""
    Create an executive summary for vendor selection based on this comparison data:
    
    {comparison_df.to_string()}
    
    Please provide:
    
    1. TOP 3 RECOMMENDATIONS with rationale
    2. KEY DIFFERENTIATORS between vendors
    3. RISK ASSESSMENT for each option
    4. COST-BENEFIT ANALYSIS summary
    5. DECISION CRITERIA recommendations
    
    Format as professional executive summary for procurement decision.
    Focus on business value, not just technical specs.
    """
    
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": analysis_prompt}]
    )
    
    return response.choices[0].message.content
\`\`\`

**üìä GENERATED COMPARISON MATRIX:**

| Vendor | Monthly Cost | vCPUs | Memory | Storage | Uptime SLA | Support | SOC 2 | Total 1st Year |
|--------|-------------|--------|---------|---------|------------|---------|-------|----------------|
| **AWS** | $2,340 | 16 | 64GB | NVMe SSD | 99.95% | Enterprise | ‚úÖ | $28,080 |
| **Azure** | $2,100 | 14 | 56GB | Premium SSD | 99.9% | Premium | ‚úÖ | $26,200 |
| **GCP** | $1,890 | 16 | 64GB | SSD | 99.95% | Standard | ‚úÖ | $23,180 |

**üéØ EXECUTIVE SUMMARY HIGHLIGHTS:**

**TOP RECOMMENDATION: Google Cloud Platform**
‚Ä¢ **Cost Advantage:** 19% lower than AWS, 11% lower than Azure
‚Ä¢ **Performance:** Matches AWS specs at lower cost
‚Ä¢ **Risk:** Standard support tier may require upgrade for production

**KEY DIFFERENTIATORS:**
‚Ä¢ **AWS:** Premium support, extensive compliance, highest cost
‚Ä¢ **Azure:** Balanced offering, strong enterprise integration
‚Ä¢ **GCP:** Best price-performance ratio, newer infrastructure

**DECISION FRAMEWORK:**
‚Ä¢ **Cost-Optimized:** Choose GCP (save $4,900+ annually)
‚Ä¢ **Risk-Minimized:** Choose AWS (proven enterprise track record)
‚Ä¢ **Balanced Approach:** Choose Azure (middle ground on cost/features)

**üìã AUTOMATED PIPELINE BENEFITS:**
‚Ä¢ **Processing Time:** 3 proposals analyzed in 15 minutes (vs 8+ hours manual)
‚Ä¢ **Accuracy:** Eliminates transcription errors and missed details
‚Ä¢ **Consistency:** Standardized comparison across all vendors
‚Ä¢ **Scalability:** Can handle unlimited proposal volume
‚Ä¢ **Auditability:** Complete extraction and normalization trail`,
    timestamp: '11:38 AM',
    documents: [
      {
        name: 'vendor_comparison_20241115_1138.xlsx',
        type: 'xlsx' as const,
        size: '3.2 MB'
      },
      {
        name: 'data_pipeline_processor.py',
        type: 'txt' as const,
        size: '18.7 KB'
      },
      {
        name: 'Executive_Summary_Vendor_Selection.pdf',
        type: 'pdf' as const,
        size: '1.4 MB'
      }
    ]
  }
];
---

<Layout title="Data Pipelines | Computation + Automation" description="See how AI creates sophisticated data processing workflows that transform unstructured inputs into structured business intelligence">
  <!-- Breadcrumb -->
  <div class="bg-slate-50 border-b border-slate-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-4">
          <li>
            <div>
              <a href="/" class="text-slate-400 hover:text-slate-500 transition-colors">
                <svg class="flex-shrink-0 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                </svg>
              </a>
            </div>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="flex-shrink-0 h-5 w-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
              </svg>
              <a href="/computation" class="ml-4 text-sm font-medium text-slate-500 hover:text-slate-700 transition-colors">
                Computation + Automation
              </a>
            </div>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="flex-shrink-0 h-5 w-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
              </svg>
              <span class="ml-4 text-sm font-medium text-slate-900">
                Data Pipelines
              </span>
            </div>
          </li>
        </ol>
      </nav>
    </div>
  </div>

  <!-- Hero Section -->
  <section class="bg-gradient-to-br from-purple-50 via-slate-50 to-purple-100 py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-8">
        <div class="w-16 h-16 bg-purple-100 text-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
          </svg>
        </div>
        <h1 class="text-4xl md:text-5xl font-bold text-slate-900 mb-6">
          Data Pipelines
        </h1>
        <p class="text-xl text-slate-600 max-w-3xl mx-auto leading-relaxed">
          Automate complex data transformation workflows that ingest content from any format 
          and output structured business intelligence. AI orchestrates the entire pipeline from extraction to analysis.
        </p>
      </div>
    </div>
  </section>

  <!-- Pattern Overview -->
  <section class="py-12 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid lg:grid-cols-3 gap-8 mb-16">
        <div class="lg:col-span-2">
          <h2 class="text-2xl font-bold text-slate-900 mb-6">Intelligent Data Orchestration</h2>
          <div class="space-y-4 text-slate-700">
            <p class="leading-relaxed">
              This pattern transforms AI into a <strong>data engineering platform</strong>. It automatically ingests 
              documents in any format‚ÄîPDFs, Excel files, PowerPoints, even scanned images‚Äîextracts relevant 
              information, normalizes it to consistent schemas, and outputs structured business intelligence.
            </p>
            <p class="leading-relaxed">
              AI understands both the technical challenges of data extraction and the business context of 
              the information. It handles format variations, missing data, and inconsistent terminology while 
              maintaining data quality and creating audit trails for compliance and reproducibility.
            </p>
          </div>
          
          <div class="mt-8 bg-purple-50 rounded-xl p-6 border border-purple-100">
            <h3 class="font-semibold text-purple-900 mb-4">Pipeline Capabilities</h3>
            <div class="grid md:grid-cols-2 gap-4">
              <div>
                <h4 class="font-medium text-purple-900 mb-2">Multi-Format Ingestion</h4>
                <ul class="text-sm text-purple-700 space-y-1">
                  <li>‚Ä¢ PDF text and table extraction</li>
                  <li>‚Ä¢ Excel formula evaluation</li>
                  <li>‚Ä¢ PowerPoint content parsing</li>
                  <li>‚Ä¢ OCR for scanned documents</li>
                </ul>
              </div>
              <div>
                <h4 class="font-medium text-purple-900 mb-2">Intelligent Processing</h4>
                <ul class="text-sm text-purple-700 space-y-1">
                  <li>‚Ä¢ Schema normalization</li>
                  <li>‚Ä¢ Data quality validation</li>
                  <li>‚Ä¢ Automated enrichment</li>
                  <li>‚Ä¢ Structured output generation</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        
        <div class="bg-slate-50 rounded-xl p-6 border border-slate-200">
          <h3 class="font-semibold text-slate-900 mb-4">Perfect For</h3>
          <ul class="space-y-3 text-sm text-slate-600">
            <li class="flex items-start">
              <div class="w-2 h-2 bg-purple-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>Vendor proposal comparisons</span>
            </li>
            <li class="flex items-start">
              <div class="w-2 h-2 bg-purple-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>RFP response analysis</span>
            </li>
            <li class="flex items-start">
              <div class="w-2 h-2 bg-purple-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>Financial statement consolidation</span>
            </li>
            <li class="flex items-start">
              <div class="w-2 h-2 bg-purple-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>Regulatory compliance reporting</span>
            </li>
            <li class="flex items-start">
              <div class="w-2 h-2 bg-purple-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>Market research aggregation</span>
            </li>
            <li class="flex items-start">
              <div class="w-2 h-2 bg-purple-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
              <span>Due diligence documentation</span>
            </li>
          </ul>
          
          <div class="mt-6 p-4 bg-purple-50 rounded-lg border border-purple-200">
            <h4 class="font-medium text-purple-900 mb-2">üîÑ Key Advantage</h4>
            <p class="text-xs text-purple-700">
              AI creates end-to-end data pipelines that handle the full complexity of 
              real-world document processing and business analysis workflows.
            </p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Conversation Example -->
  <section class="py-16 bg-slate-50">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-slate-900 mb-4">Vendor Proposal Processing Pipeline</h2>
        <p class="text-slate-600 leading-relaxed">
          Watch AI build an automated system to extract and compare vendor proposals across different formats
        </p>
      </div>
      
      <ChatConversation 
        messages={dataPipelinesConversation}
        title="Multi-Format Data Pipeline Development"
        description="Procurement team automating vendor proposal analysis with AI-powered data processing pipeline"
      />
    </div>
  </section>

  <!-- Value Demonstration -->
  <section class="py-16 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <h2 class="text-3xl font-bold text-slate-900 mb-8 text-center">The Data Transformation Engine</h2>
      
      <div class="grid lg:grid-cols-2 gap-12">
        <!-- Manual Process -->
        <div>
          <h3 class="text-xl font-semibold text-slate-900 mb-6 flex items-center">
            <div class="w-8 h-8 bg-red-100 text-red-600 rounded-full flex items-center justify-center mr-3 text-sm">üìÑ</div>
            Manual Document Processing
          </h3>
          <div class="space-y-4">
            <div class="bg-red-50 rounded-xl p-6 border border-red-200">
              <ul class="space-y-3 text-sm text-red-700">
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-red-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Days spent reading and extracting data manually</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-red-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Inconsistent data extraction across formats</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-red-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Manual transcription errors and omissions</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-red-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Difficulty comparing different proposal formats</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-red-400 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Delayed procurement decisions</span>
                </li>
              </ul>
            </div>
            <div class="text-center py-4">
              <div class="text-2xl font-bold text-red-600">3 Vendor Proposals</div>
              <div class="text-sm text-red-600">= 2-3 days manual analysis</div>
            </div>
          </div>
        </div>
        
        <!-- AI Data Pipeline -->
        <div>
          <h3 class="text-xl font-semibold text-slate-900 mb-6 flex items-center">
            <div class="w-8 h-8 bg-purple-100 text-purple-600 rounded-full flex items-center justify-center mr-3 text-sm">üîÑ</div>
            AI Data Pipeline
          </h3>
          <div class="space-y-4">
            <div class="bg-purple-50 rounded-xl p-6 border border-purple-200">
              <ul class="space-y-3 text-sm text-purple-700">
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Automated multi-format document ingestion</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Intelligent extraction with AI understanding</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Standardized schema normalization</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Automated comparison matrix generation</span>
                </li>
                <li class="flex items-start">
                  <div class="w-2 h-2 bg-purple-500 rounded-full mt-2 mr-3 flex-shrink-0"></div>
                  <span>Executive summary with recommendations</span>
                </li>
              </ul>
            </div>
            <div class="text-center py-4">
              <div class="text-2xl font-bold text-purple-600">3 Vendor Proposals</div>
              <div class="text-sm text-purple-600">= 15 minutes automated processing</div>
            </div>
          </div>
        </div>
      </div>

      <!-- ROI Metrics -->
      <div class="mt-16 grid md:grid-cols-4 gap-6 text-center">
        <div class="bg-slate-50 rounded-xl p-6 border border-slate-200">
          <div class="text-3xl font-bold text-purple-600 mb-2">96%</div>
          <div class="text-sm text-slate-600 mb-1">Time Savings</div>
          <div class="text-xs text-slate-500">3 days ‚Üí 15 minutes</div>
        </div>
        <div class="bg-slate-50 rounded-xl p-6 border border-slate-200">
          <div class="text-3xl font-bold text-purple-600 mb-2">19%</div>
          <div class="text-sm text-slate-600 mb-1">Cost Advantage</div>
          <div class="text-xs text-slate-500">GCP vs AWS identified</div>
        </div>
        <div class="bg-slate-50 rounded-xl p-6 border border-slate-200">
          <div class="text-3xl font-bold text-purple-600 mb-2">100%</div>
          <div class="text-sm text-slate-600 mb-1">Data Consistency</div>
          <div class="text-xs text-slate-500">standardized extraction</div>
        </div>
        <div class="bg-slate-50 rounded-xl p-6 border border-slate-200">
          <div class="text-3xl font-bold text-purple-600 mb-2">$4.9K</div>
          <div class="text-sm text-slate-600 mb-1">Annual Savings</div>
          <div class="text-xs text-slate-500">optimal vendor selection</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Key Insight -->
  <section class="py-16 bg-slate-900">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h2 class="text-3xl font-bold text-white mb-6">Intelligence-Driven Data Architecture</h2>
      <p class="text-xl text-slate-300 leading-relaxed mb-8">
        <span class="text-purple-400 font-semibold">AI doesn't just move data‚Äîit understands and transforms it.</span>
        By combining document processing, business intelligence, and workflow automation, AI creates data pipelines 
        that adapt to your content formats and business requirements. It's the evolution from data processing 
        to intelligent information orchestration.
      </p>
      
      <div class="grid md:grid-cols-3 gap-6 mt-12">
        <div class="text-center">
          <div class="text-3xl font-bold text-purple-400 mb-2">$2,340</div>
          <div class="text-slate-400">AWS Monthly Cost Extracted</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-purple-400 mb-2">99.95%</div>
          <div class="text-slate-400">Uptime SLA Normalized</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-purple-400 mb-2">16</div>
          <div class="text-slate-400">vCPUs Standardized Across Vendors</div>
        </div>
      </div>
    </div>
  </section>
</Layout>